#!/usr/bin/python3
# AGPL 2022 by David Hamner
import os
import glob
import time
from flask import Flask, render_template, request
app = Flask("Cuttleprint")
port = 8000
home_dir = os.path.expanduser('~')
printers_path = f"{home_dir}/printers"

script_path = os.path.dirname(os.path.realpath(__file__))
config_file_path = f"{home_dir}/printer_settings.txt"
if not os.path.isfile(config_file_path):
    os.mknod(config_file_path)


def getIP():
    import socket
    #Thanks: https://stackoverflow.com/a/1267524/5282272
    try:
        return (([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")] or [[(s.connect(("8.8.8.8", 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) + ["no IP found"])[0]
    except Exception:
        return(False)

#Welcome loop until the network is setup
network_missing = True
while network_missing:
    SEVER_IP = getIP()
    network_missing = SEVER_IP == False
    if network_missing:
        print("Welcome to Cuttleprint! Setup the network with the top right icons to start your server. Now is also a good time to connect all your 3d printers.\n\n")
        time.sleep(5)


def get_printer_devs():
    
    types_of_printers = ["ttyUSB", "ttyACM"]
    total_printers = []
    for printer_type in types_of_printers:
        total_printers = total_printers + glob.glob(f"/dev/{printer_type}*")
    
    return(total_printers)


def pull_purinter_name(printer):
    with open(config_file_path) as fh:
        for line in fh.readlines():
            if printer in line:
                return(line.split(":")[-1])

def pull_purinter_speed(printer):
    with open(config_file_path) as fh:
        for line in fh.readlines():
            if printer in line:
                return(line.split(":")[1])

def write_config(printers):
    config_text = ""
    for printer in printers:
        config_name, speed = printers[printer]
        config_text = config_text + f"{printer}:{speed}:{config_name}\n"
    
    config_text = "#Dev_name:baud_speed or gpx cmd start:Unique nice name\n" + config_text
    
    with open(config_file_path, "w") as fh:
        fh.write(config_text)
    print(config_text)

def reboot_cuttleprint():
    with open(f"{home_dir}/reboot_needed.trigger", "a+") as fh:
        fh.write("reboot\n")


def css():
    return """
    <style>
        body 
        {
            background-color: #6CA5DE;
        }
        
        .buttons
        {
            background-color: #E1B637;
            border-radius: 35px;
            font-size: 20px;
        }
        
        .buttons a
        {
            background:lightblue;
            border-radius: 30px;
            font-size: 30px;
        }
        
        .printer_bar
        {
            background-image: linear-gradient(#6CA5DE, purple, #6CA5DE);
            width: 100%; 
            padding: 5px;
            border-radius: 30px;
        }
        .menu 
        {
            width: 100%; 
            margin-left: 2px;
            padding-left:30px;
            border: 2px solid purple;
            background-color: black;
            border-radius: 35px;
            overflow:hidden;
            color: white;
        }

        .menu a 
        {
            background-color: black; 
            color: white;
            display: block; 
            padding: 5px; 
            padding-left: 20px;
            font-size: 30px;
            text-decoration: none;
            float: left;
        }
    </style>"""


def menu_html():
    return f"""
    
        <div class="menu">
            <a href="http://{SEVER_IP}:{port}">Cuttleprint</a>
            <a href="http://{SEVER_IP}:{port}/post-hast">Config</a>
            <a href="https://source.puri.sm/david.hamner/cuttleprint">About</a>
        </div>"""


@app.route('/post-hast', methods=['POST'])
def form_post():
    # handle the POST request
    if request.method == 'POST':
        printer_data = request.form.keys()
        printers_names = []
        pritners = {}
        for possible_printer in printer_data:
            if not possible_printer.endswith("baud_rate"):
                printers_names.append(possible_printer)
        
        for printer in printers_names:
            baud_rate_name = f"{printer}_baud_rate"
            baud_rate = request.form.get(baud_rate_name)
            printer_name = request.form.get(printer)
            if printer_name != "None":
                pritners[printer] = [printer_name, baud_rate]
        print(pritners)
        
        write_config(pritners)
        reboot_cuttleprint()
        return(f'<meta http-equiv="refresh" content=3; URL=http://{SEVER_IP}:{port}" />Restarting..')


@app.route('/post-hast', methods=['get'])
def form_get():
    return_html = ""
    devs = get_printer_devs()
    
    for possible_printer in devs:
        short_name = possible_printer.split("/")[-1].strip()
        config_name = pull_purinter_name(short_name)
        printer_speed = pull_purinter_speed(short_name)
        print(f"DEBUG: {printer_speed}")
        return_html = return_html + f"""
        <div class='menu'>
        <label>{short_name}: <input type="text" value="{config_name}" placeholder="{config_name}" name="{short_name}"></label>
        
        <select NAME="{short_name}_baud_rate">
        """
        for speed in ["9600", "115200", "250000", "gpx -m fcp -f 1.75 -s"]:
            if speed == printer_speed:
                return_html = return_html + f'<option selected name="{speed}">{speed}</option>\n'
            else:
                return_html = return_html + f'<option name="{speed}">{speed}</option>\n'
        
        return_html = return_html + f"""
        </select>
        </div>
        """
    return f'''
    <body>{css()}\n{menu_html()}\n
    <form method="POST">
    {return_html}
    <input type="submit" value="OVERWIRE config">
    </form>'''


@app.route('/upload/<printer>')
def upload_file_page(printer):
    page_HTML = f"""
            <form class='menu' action = "http://{SEVER_IP}:{port}/uploader/{printer}" method = "POST" enctype = "multipart/form-data">
                <input type = "file" name = "file" />
                <input type = "submit" value="Upload gcode"/>
            </form>"""
    
    page_HTML = f"<body>{css()}\n{menu_html()}\n{page_HTML}\n</body>"
    return (page_HTML)

@app.route('/uploader/<printer>', methods = ['GET', 'POST'])
def upload_file(printer):
    if request.method == 'POST':
        f = request.files['file']
        if f.filename == "":
            return("Select gcode first")
        elif not f.filename.lower().endswith(".gcode"):
            return("File must end with .gcode")
        path = f"{printers_path}/{printer}/upload/{f.filename}"
        print(f"Saving to {path}")
        f.save(path)
        reloader = f"""
            <meta http-equiv="refresh" content="time; URL=http://{SEVER_IP}:{port}" />
            """
        
        page_HTML = "<p>file uploaded successfully</p>"
        page_HTML = f"{reloader}<body>{css()}\n{menu_html()}\n{page_HTML}\n</div>\n</body>"
        return(page_HTML)


@app.route('/reprint/<printer>/<gcode_name>')
def reprint_print_on(printer, gcode_name):
    page_HTML = ""
    reloader = f"""
        <meta http-equiv="refresh" content="time; URL=http://{SEVER_IP}:{port}" />
        """
    path = f"{printers_path}/{printer}/done/{gcode_name}"
    reprint_path = f"{printers_path}/{printer}/upload/{gcode_name}"
    if os.path.isfile(path):
        os.rename(path, reprint_path)
        page_HTML = "<p>Started print</p>"
    else:
        page_HTML = f"<p>Uhm, can't fine {path}</p>"
    
    page_HTML = f"{reloader}<body>{css()}\n{menu_html()}\n{page_HTML}\n</div>\n</body>"
    return(page_HTML)



@app.route('/stop/<printer>')
def stop_print_on(printer):
    path = glob.glob(f"{printers_path}/{printer}/printing/*")[0]
    reloader = f"""
            <meta http-equiv="refresh" content="time; URL=http://{SEVER_IP}:{port}" />
            """
    if os.path.isfile(path):
        os.remove(path)
        page_HTML = "<p>Done</p><p>Note: GPX printers can only be stopped via the printer interface</p>"
    else:
        page_HTML = "<p>Uhm, that seem to not be printing things...</p>"
    
    page_HTML = f"{reloader}<body>{css()}\n{menu_html()}\n{page_HTML}\n</div>\n</body>"
    return(page_HTML)


@app.route('/')
def index():
    HTML = ""
    for printer in glob.glob(f"{printers_path}/*"):
        printer_active = False
        done_dir = f"{printer}/done"
        last_print = ""
        active_print = glob.glob(f"{printer}/printing/*")
        if active_print != []:
            printer_active = True
        if not printer_active:
            file_paths = glob.glob(f"{printer}/done/*")
            print(f"DEBUG: {file_paths}")
            if file_paths != []:
                newest = max(file_paths , key = os.path.getctime)
                print(newest)
                sort_name = newest.split("/")[-1]
                last_print = newest
        print(printer_active)
        printer = printer.split("/")[-1]
        clean_name = printer.replace("_"," ")
        
        # Printer ready
        if not printer_active and last_print == "":
            HTML = HTML + f"""
            <div class='printer_bar'>
                <button class='buttons' onclick="window.location.href='/upload/{printer}';">
                    Upload gcode to: {clean_name}
                </button>
            </div>
            """
        # Printer done printing
        elif last_print != "":
            HTML = HTML + f"""
            <div class='printer_bar'>
                <button class='buttons' onclick="window.location.href='/reprint/{printer}/{sort_name}';">
                    Reprint on: {clean_name} ({sort_name})
                </button>
                <button class='buttons' onclick="window.location.href='/upload/{printer}';">
                    Upload gcode to: {clean_name}
                </button>
            </div>
            """
        # Printer printing
        elif printer_active:
            HTML = HTML + f"""
            <div class='printer_bar'>
                <button class='buttons' onclick="window.location.href='/stop/{printer}';">
                    STOP: {clean_name} (Printing: {active_print[0]})
                </button>
            </div>
            """
    full_HTML = f"<meta http-equiv=refresh content=15>\n"
    full_HTML = full_HTML + f"<body>{css()}\n{menu_html()}\n{HTML}\n</body>"
    return(full_HTML)


print(f"Starting server! Use a browser to configure your printers at:\n    http://{SEVER_IP}:{port}/post-hast\n\nKeep in mind this is ment to be run on a trusted network and should not be hosted on the internet.")
app.run(host=SEVER_IP,port=port,debug=False)

